environment:

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    #     # /E:ON and /V:ON options are not enabled in the batch script intepreter
    #         # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\build_tools\\appveyor\\run_with_env.cmd"
    
  matrix:

    - PYTHON: "C:\\Python27_64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      CONDA_PY: "27"

    - PYTHON: "C:\\Python33_64"
      PYTHON_VERSION: "3.3"
      PYTHON_ARCH: "64"
      CONDA_PY: "33"
      
    - PYTHON: "C:\\Python34_64"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"
      CONDA_PY: "34"

    - PYTHON: "C:\\Python35_64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
      CONDA_PY: "35"

    - PYTHON: "C:\\Python27_32"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      CONDA_PY: "27"

    - PYTHON: "C:\\Python33_32"
      PYTHON_VERSION: "3.3"
      PYTHON_ARCH: "32"
      CONDA_PY: "33"
      
    - PYTHON: "C:\\Python34_32"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "32"
      CONDA_PY: "34"

    - PYTHON: "C:\\Python35_32"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"
      CONDA_PY: "35"


# We always use a 64-bit machine, but can build x86 distributions
# # with the PYTHON_ARCH variable (which is used by CMD_IN_ENV).
platform:
  - x64

#     # all our python builds have to happen in tests_script...
build: false

init:
  - "ECHO %PYTHON_VERSION% %PYTHON%"

install:
  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit)
  # updates conda & installs: conda-build jinja2 anaconda-client
  - powershell .\build_tools\appveyor\install.ps1
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
  - echo "install"
  - cd
  - ls -ltr

  # this can conflict with git
  - cmd: rmdir C:\cygwin /s /q

  # install our build environment
  - cmd: conda config --set show_channel_urls true --set always_yes true --set changeps1 false
  - cmd: conda update -q conda
  - cmd: conda config --set ssl_verify false

  # this is now the downloaded conda...
  - cmd: conda info -a

  # build em using the local source checkout in the correct windows env
  # - cmd: '%CMD_IN_ENV% conda build conda.recipe -q'

  # create our env
  - cmd: conda create -q -n py_stringmatching python=%PYTHON_VERSION%
  - cmd: activate py_stringmatching
  - cmd: conda install -y -c paulgc py_stringmatching
#  - SET REQ=build_tools\requirements_dev.txt
#  - cmd: echo "installing requirements from %REQ%"
#  - cmd: conda install -n py_stringmatching -q --file=%REQ%
#  - ps: conda install -n py_stringmatching (conda build conda.recipe -q --output)

test_script:
  # Nosetests take care of unit tests
#  - cd \
#  - cmd: activate py_stringmatching
#  - cmd: conda list
#  - cmd: nosetests
  - "python -c \"import py_stringmatching as sm; print(sm.__version__)\""       
  - "python -c \"import py_stringmatching as sm; l = sm.Levenshtein(); print(l.get_raw_score('ag', 'dg'))\""
  - "python -c \"import py_stringmatching as sm; q = sm.QgramTokenizer(); print(q.get_prefix_pad())\""

on_success:
  - echo Build succesful!
